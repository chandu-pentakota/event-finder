{"ast":null,"code":"var _jsxFileName = \"/home/ib_developer/Desktop/chandu_project/event-finder/find-my-events/src/components/events/EditEvent.js\";\nimport React, { Component } from 'react';\nimport TextInputGroup from '../layout/TextInputGroup';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getEvent, updateEvent } from '../../actions/eventActions';\nimport classnames from 'classnames';\n\nclass EditEvent extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      name: '',\n      description: '',\n      date: '',\n      location: '',\n      errors: {}\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      const {\n        name,\n        description,\n        date,\n        location\n      } = this.state; //Checking for Errors\n\n      if (name === '') {\n        this.setState({\n          errors: {\n            name: 'Event Name is required'\n          }\n        });\n        return;\n      }\n\n      if (description === '') {\n        this.setState({\n          errors: {\n            description: 'Event Description is required'\n          }\n        });\n        return;\n      }\n\n      if (date === '') {\n        this.setState({\n          errors: {\n            date: 'Event Date is required'\n          }\n        });\n        return;\n      }\n\n      if (location === '') {\n        this.setState({\n          errors: {\n            location: 'Event Location is required'\n          }\n        });\n        return;\n      }\n\n      const {\n        id\n      } = this.props.match.params; //Preparing data\n\n      const updEvent = {\n        id,\n        name,\n        description,\n        date,\n        location\n      }; //// UPDATE EVENT ////\n      //Sending data to function\n\n      this.props.updateEvent(updEvent); //Again Setting State to Empty after inserting data\n\n      this.setState({\n        name: '',\n        description: '',\n        date: '',\n        location: '',\n        errors: {}\n      }); //Navigating to Homepage after insertion\n\n      this.props.history.push('/');\n    };\n\n    this.onChange = e => this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  componentDidMount() {\n    //Fetches the id from the URL\n    const {\n      id\n    } = this.props.match.params;\n    this.props.getEvent(id);\n  }\n\n  componentWillReceiveProps(nextProps, nextState) {\n    const {\n      name,\n      description,\n      date,\n      location\n    } = nextProps.event;\n    this.setState({\n      name,\n      description,\n      date,\n      location\n    });\n  }\n\n  render() {\n    const {\n      name,\n      description,\n      date,\n      location,\n      errors\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"display-4 mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"text-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }\n    }, \"Edit\"), \" Event\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card mb-3 mt-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }\n    }, \"Edit Event\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(TextInputGroup, {\n      label: \"Event Name\",\n      name: \"name\",\n      placeholder: \"Event Name\",\n      value: name,\n      onChange: this.onChange,\n      error: errors.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 33\n      }\n    }, \"Event Description\"), /*#__PURE__*/React.createElement(\"textarea\", {\n      name: \"description\",\n      className: classnames('form-control form-control-lg', {\n        'is-invalid': errors.description\n      }),\n      cols: \"30\",\n      rows: \"5\",\n      value: description,\n      placeholder: \"Enter Event Description...\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 33\n      }\n    }), errors.description && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 56\n      }\n    }, errors.description)), /*#__PURE__*/React.createElement(TextInputGroup, {\n      label: \"Event Date\",\n      name: \"date\",\n      placeholder: \"Event Date\",\n      value: date,\n      onChange: this.onChange,\n      error: errors.date,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(TextInputGroup, {\n      label: \"Event Location\",\n      name: \"location\",\n      placeholder: \"Event Location\",\n      value: location,\n      onChange: this.onChange,\n      error: errors.location,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Update Event\",\n      className: \"btn btn-dark btn-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 29\n      }\n    })))));\n  }\n\n} //Props validation\n\n\nEditEvent.propTypes = {\n  event: PropTypes.object.isRequired,\n  getEvent: PropTypes.func.isRequired\n}; //Mapping state to Props\n\nconst mapStateToProps = state => ({\n  event: state.event.event\n}); //Exporting Component with addEvent function\n\n\nexport default connect(mapStateToProps, {\n  getEvent,\n  updateEvent\n})(EditEvent);","map":{"version":3,"sources":["/home/ib_developer/Desktop/chandu_project/event-finder/find-my-events/src/components/events/EditEvent.js"],"names":["React","Component","TextInputGroup","PropTypes","connect","getEvent","updateEvent","classnames","EditEvent","state","name","description","date","location","errors","onSubmit","e","preventDefault","setState","id","props","match","params","updEvent","history","push","onChange","target","value","componentDidMount","componentWillReceiveProps","nextProps","nextState","event","render","propTypes","object","isRequired","func","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport TextInputGroup from '../layout/TextInputGroup';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getEvent, updateEvent } from '../../actions/eventActions';\nimport classnames from 'classnames';\n\nclass EditEvent extends Component {\n    //defining initial state of form\n    state = {\n        name: '',\n        description: '',\n        date: '',\n        location: '',\n        errors: {}\n    }\n\n    componentDidMount() {\n        //Fetches the id from the URL\n        const { id } = this.props.match.params;\n        this.props.getEvent(id);\n    }\n\n    componentWillReceiveProps(nextProps, nextState) {\n        const { name, description, date, location } = nextProps.event;\n        this.setState({\n            name,\n            description,\n            date,\n            location\n        });\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n\n        const { name, description, date, location } = this.state;\n\n        //Checking for Errors\n        if (name === '') {\n            this.setState({ errors: { name: 'Event Name is required' } });\n            return;\n        }\n\n        if (description === '') {\n            this.setState({ errors: { description: 'Event Description is required' } });\n            return;\n        }\n\n        if (date === '') {\n            this.setState({ errors: { date: 'Event Date is required' } });\n            return;\n        }\n\n        if (location === '') {\n            this.setState({ errors: { location: 'Event Location is required' } });\n            return;\n        }\n\n        const { id } = this.props.match.params;\n\n        //Preparing data\n        const updEvent = {\n            id,\n            name,\n            description,\n            date,\n            location\n        };\n\n        //// UPDATE EVENT ////\n        //Sending data to function\n        this.props.updateEvent(updEvent);\n\n        //Again Setting State to Empty after inserting data\n        this.setState({\n            name: '',\n            description: '',\n            date: '',\n            location: '',\n            errors: {}\n        });\n\n        //Navigating to Homepage after insertion\n        this.props.history.push('/');\n\n    }\n\n    //Since we are setting value in input fields so we need this otherwise we won't be able to fill the form\n    onChange = e => this.setState({ [e.target.name]: e.target.value });\n\n    render() {\n\n        const { name, description, date, location, errors } = this.state;\n\n        return (\n            <React.Fragment>\n                <h1 className=\"display-4 mb-2\">\n                    <span className=\"text-primary\">Edit</span> Event\n                </h1>\n                <div className=\"card mb-3 mt-3\">\n                    <div className=\"card-header\">Edit Event</div>\n                    <div className=\"card-body\">\n                        <form onSubmit={this.onSubmit}>\n                            <TextInputGroup\n                                label=\"Event Name\"\n                                name=\"name\"\n                                placeholder=\"Event Name\"\n                                value={name}\n                                onChange={this.onChange}\n                                error={errors.name}\n                            />\n                            <div className=\"form-group\">\n                                <label htmlFor=\"description\">Event Description</label>\n                                <textarea\n                                    name=\"description\"\n                                    className={classnames('form-control form-control-lg', { 'is-invalid': errors.description })}\n                                    cols=\"30\"\n                                    rows=\"5\"\n                                    value={description}\n                                    placeholder=\"Enter Event Description...\"\n                                    onChange={this.onChange}\n                                >\n                                </textarea>\n                                {errors.description && <div className=\"invalid-feedback\">{errors.description}</div>}\n                            </div>\n                            <TextInputGroup\n                                label=\"Event Date\"\n                                name=\"date\"\n                                placeholder=\"Event Date\"\n                                value={date}\n                                onChange={this.onChange}\n                                error={errors.date}\n                            />\n                            <TextInputGroup\n                                label=\"Event Location\"\n                                name=\"location\"\n                                placeholder=\"Event Location\"\n                                value={location}\n                                onChange={this.onChange}\n                                error={errors.location}\n                            />\n                            <input\n                                type=\"submit\"\n                                value=\"Update Event\"\n                                className=\"btn btn-dark btn-block\"\n                            />\n                        </form>\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n}\n\n//Props validation\nEditEvent.propTypes = {\n    event: PropTypes.object.isRequired,\n    getEvent: PropTypes.func.isRequired\n}\n\n//Mapping state to Props\nconst mapStateToProps = state => ({\n    event: state.event.event\n})\n\n//Exporting Component with addEvent function\nexport default connect(mapStateToProps, { getEvent, updateEvent })(EditEvent);"]},"metadata":{},"sourceType":"module"}