{"ast":null,"code":"var _jsxFileName = \"/home/ib_developer/Desktop/chandu_project/event-finder/find-my-events/src/components/events/Events.js\";\nimport React, { Component } from 'react';\nimport Event from './Event';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { getEvents } from '../../actions/eventActions';\n\nclass Events extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      search: \"\"\n    };\n\n    this.onChange = e => {\n      this.setState({\n        search: e.target.value\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.getEvents();\n  }\n\n  render() {\n    const {\n      events\n    } = this.props;\n    const {\n      search\n    } = this.state; //filtering events according to search box if it is empty it will show all the events\n\n    const filteredEvents = events.filter(event => {\n      return event.name.toLowerCase().indexOf(search.toLowerCase()) !== -1;\n    });\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"display-4 mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"text-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }\n    }, \"Event\"), \" List\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-8 col-lg-8 col-sm-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      className: \"form-control\",\n      placeholder: \"Search For Event...\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mt-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }\n    }, filteredEvents.map(event => /*#__PURE__*/React.createElement(Event, {\n      key: event.id,\n      event: event,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nEvents.propTypes = {\n  events: PropTypes.array.isRequired,\n  getEvents: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  events: state.event.events\n});\n\nexport default connect(mapStateToProps, {\n  getEvents\n})(Events);","map":{"version":3,"sources":["/home/ib_developer/Desktop/chandu_project/event-finder/find-my-events/src/components/events/Events.js"],"names":["React","Component","Event","connect","PropTypes","getEvents","Events","state","search","onChange","e","setState","target","value","componentDidMount","props","render","events","filteredEvents","filter","event","name","toLowerCase","indexOf","map","id","propTypes","array","isRequired","func","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,4BAA1B;;AAEA,MAAMC,MAAN,SAAqBL,SAArB,CAA+B;AAAA;AAAA;AAAA,SAG3BM,KAH2B,GAGnB;AACJC,MAAAA,MAAM,EAAG;AADL,KAHmB;;AAAA,SAQ3BC,QAR2B,GAQhBC,CAAC,IAAI;AACZ,WAAKC,QAAL,CAAc;AAAEH,QAAAA,MAAM,EAAEE,CAAC,CAACE,MAAF,CAASC;AAAnB,OAAd;AACH,KAV0B;AAAA;;AAY3BC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,KAAL,CAAWV,SAAX;AACH;;AAEDW,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA;AAAF,QAAa,KAAKF,KAAxB;AACA,UAAM;AAAEP,MAAAA;AAAF,QAAa,KAAKD,KAAxB,CAFK,CAGL;;AACA,UAAMW,cAAc,GAAGD,MAAM,CAACE,MAAP,CAAeC,KAAK,IAAI;AAC3C,aAAOA,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyBC,OAAzB,CAAkCf,MAAM,CAACc,WAAP,EAAlC,MAA6D,CAAC,CAArE;AACH,KAFsB,CAAvB;AAIA,wBACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,SAAS,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAM,MAAA,SAAS,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,UADJ,eAII;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,SAAS,EAAC,cAA7B;AAA4C,MAAA,WAAW,EAAC,qBAAxD;AAA8E,MAAA,QAAQ,EAAE,KAAKb,QAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CAJJ,eASI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKS,cAAc,CAACM,GAAf,CAAmBJ,KAAK,iBACrB,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAEA,KAAK,CAACK,EAAlB;AAAsB,MAAA,KAAK,EAAEL,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CADL,CATJ,CADJ;AAiBH;;AAzC0B;;AA4C/Bd,MAAM,CAACoB,SAAP,GAAmB;AACfT,EAAAA,MAAM,EAAEb,SAAS,CAACuB,KAAV,CAAgBC,UADT;AAEfvB,EAAAA,SAAS,EAAED,SAAS,CAACyB,IAAV,CAAeD;AAFX,CAAnB;;AAKA,MAAME,eAAe,GAAIvB,KAAD,KAAY;AAChCU,EAAAA,MAAM,EAAEV,KAAK,CAACa,KAAN,CAAYH;AADY,CAAZ,CAAxB;;AAIA,eAAed,OAAO,CAAC2B,eAAD,EAAkB;AAAEzB,EAAAA;AAAF,CAAlB,CAAP,CAAwCC,MAAxC,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport Event from './Event';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { getEvents } from '../../actions/eventActions';\n\nclass Events extends Component {\n\n    //Initial state for Search Implementation\n    state = {\n        search : \"\"\n    }\n\n    //Onchange in input field fetching value\n    onChange = e => {\n        this.setState({ search: e.target.value });\n    }\n\n    componentDidMount() {\n        this.props.getEvents();\n    }\n\n    render() {\n        const { events } = this.props;\n        const { search } = this.state;\n        //filtering events according to search box if it is empty it will show all the events\n        const filteredEvents = events.filter( event => {\n            return event.name.toLowerCase().indexOf( search.toLowerCase() ) !== -1\n        })\n\n        return (\n            <React.Fragment>\n                <h1 className=\"display-4 mb-2\">\n                    <span className=\"text-primary\">Event</span> List\n                </h1>\n                <div className=\"row justify-content-center\">\n                    <div className=\"col-md-8 col-lg-8 col-sm-12\">\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Search For Event...\" onChange={this.onChange} />\n                    </div>\n                </div>\n                <div className=\"row mt-3\">\n                    {filteredEvents.map(event => (\n                        <Event key={event.id} event={event} />\n                    ))}\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nEvents.propTypes = {\n    events: PropTypes.array.isRequired,\n    getEvents: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n    events: state.event.events\n});\n\nexport default connect(mapStateToProps, { getEvents })(Events);"]},"metadata":{},"sourceType":"module"}